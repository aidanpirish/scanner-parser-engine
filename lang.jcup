class AlgebraParser;

// Code to be included in the generated parser class
parser code {:
    LangScanner scanner;
    public LangParser(LangScanner scanner) {
        this.scanner = scanner;
    }
:}

// Code the parser will use to get the next token
scan with {:
    return scanner.yylex();
:}

// Specification of the grammar

// Types of terminals and non-terminals (rules)
terminal        PLUS, MINUS, TIMES, DIVIDE, POWER, LPAREN, RPAREN, PRINT, COMMA, SEMI, EQUAL;
terminal Double NUMBER; // NUMBER terminals (tokens) have data type Double
terminal String IDENTIFIER, WORD; // IDENTIFIER terminals (tokens) have data type String

non terminal String program, statement, assignment, printline, arguments, string, expr, term, negation, power, paren;

// Rules
// I use "printline" instead of print to avoid confusion with token

program ::= statement:a
        | statement:a program:b

statement ::= printline:a SEMI
          | assignment:a SEMI

assignment ::= name:a EQUAL expr:b

printline ::= PRINT arguments:a

arguments ::= expr:a
              | QUOTE string:a QUOTE

string ::= WORD

expr ::= expr:a PLUS term:b   {: RESULT = a+b; :}
    | expr:a MINUS term:b     {: RESULT = a-b; :}
    | term:a                  {: RESULT = a; :}
;

term ::= term:a TIMES negation:b  {: RESULT = a*b; :}
    | term:a DIVIDE negation:b    {: RESULT =  a/b; :}
    | negation:a                  {: RESULT = a; :}
;

negation ::= MINUS power:a        {: RESULT = a; :}
    | power:a                     {: RESULT = a; :}
;

power ::= paren:a POWER power:b   {: RESULT = a**b; :}
    | paren:a                     {: RESULT = a; :}
;

paren ::= LPAREN expr:a RPAREN    {: RESULT = a; :}
    | NUMBER:x                    {: RESULT = x; :}
    | IDENTIFIER:name             {: RESULT = name; :}
;
